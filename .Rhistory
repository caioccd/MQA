x <- runif(50,1,10)
n <- length(x)
xgrid <- seq(from = min(x) - 1, to = max(x) + 1, by = 0.01)
h <- 0.4
bumps <- sapply(x, function(a) gauss((xgrid - a)/h)/(n * h))
class(bumps)
attributes(bumps)
h <- hist(x, breaks = 15, plot = F)
(hmax <- ceiling(10*max(h$density))/10)
(pmax <- ceiling(10*max(rowSums(bumps)))/10)
plot(xgrid, rowSums(bumps), ylab = expression(hat(f)(x)), type = "l", xlab = "x", ylim = c(0,max(pmax,hmax)), lwd = 2)
hist(x, breaks = 15, freq = F, border = 'blue', add = T)
rug(x, lwd = 2)
out <- apply(bumps, 2, function(b) lines(xgrid, b))
#---------------- exemplo 2D
graphics.off()
cat("\014")   # ctrl+L to the console
epa <- function(x, y) ((x^2 + y^2) < 1) * 2/pi * (1 - x^2 - y^2)
class(epa)
x <- seq(from = -1.1, to = 1.1, by = 0.05)
x
epavals <- sapply(x, function(a) epa(a, x))
class(epavals)
persp(x = x, y = x, z = epavals, xlab = "x", ylab = "y",
zlab = expression(K(x, y)), theta = -35, axes = TRUE,
box = TRUE)
#-----------------------------
library("KernSmooth")
attributes(CYGOB1)
plot(CYGOB1, pch = 19,  col = 'blue',  xlab = "log surface temperature",
ylab = "log light intensity")
CYGOB1d <- bkde2D(CYGOB1, bandwidth = sapply(CYGOB1, dpik))
class(CYGOB1d)
attributes(CYGOB1d)
CYGOB1d$x1[1:10]
CYGOB1d$x2[1:10]
CYGOB1d$fhat[1:10]
contour(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat, add = TRUE)
#-----------------------------
persp(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat,
xlab = "log surface temperature",
ylab = "log light intensity",
zlab = "density")
#--------------------
# exemplo com dados aleatorios
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(2,2))
x <- runif(30,0,1)
y <- runif(30,0,1)
zframe <- data.frame(x,y)
plot(x,y, pch = 19,  col = 'blue',  xlab = "eixo x",
ylab = "eixo y")
cz <- bkde2D(zframe, bandwidth = sapply(zframe, dpik))
contour(x = cz$x1, y = cz$x2, z = cz$fhat, add = TRUE)
persp(x = cz$x1, y = cz$x2, z = cz$fhat, theta = 0, phi = 15, # default
xlab = "log surface temperature",
ylab = "log light intensity",
zlab = "density")
persp(x = cz$x1, y = cz$x2, z = cz$fhat, theta = 45, phi = 15,
xlab = "log surface temperature",
ylab = "log light intensity",
zlab = "density")
persp(x = cz$x1, y = cz$x2, z = cz$fhat, theta = 45, phi = 45,
xlab = "log surface temperature",
ylab = "log light intensity",
zlab = "density")
#---------------- scatterplot3d
graphics.off()
cat("\014")   # ctrl+L to the console
#install.packages("scatterplot3d")
library("scatterplot3d")
measure <-
structure(list(V1 = 1:20, V2 = c(34L, 37L, 38L, 36L, 38L, 43L,
40L, 38L, 40L, 41L, 36L, 36L, 34L, 33L, 36L, 37L, 34L, 36L, 38L,
35L), V3 = c(30L, 32L, 30L, 33L, 29L, 32L, 33L, 30L, 30L, 32L,
24L, 25L, 24L, 22L, 26L, 26L, 25L, 26L, 28L, 23L), V4 = c(32L,
37L, 36L, 39L, 33L, 38L, 42L, 40L, 37L, 39L, 35L, 37L, 37L, 34L,
38L, 37L, 38L, 37L, 40L, 35L)), .Names = c("V1", "V2", "V3",
"V4"), class = "data.frame", row.names = c(NA, -20L))
head(measure)
measure <- measure[,-1]
head(measure)
names(measure) <- c("chest", "waist", "hips")
head(measure)
measure$gender <- gl(2, 10)
head(measure)
levels(measure$gender) <- c("male", "female")
head(measure)
#-------
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "grey", ...)
}
pairs(measure[, c("chest", "waist", "hips")],
diag.panel = panel.hist,
panel = function (x,y) {
data <- data.frame(cbind(x,y))
par(new = TRUE)
den <- bkde2D(data, bandwidth = sapply(data, dpik))
contour(x = den$x1, y = den$x2,
z = den$fhat, axes = FALSE)
})
#-------
#----------------------
with(measure, scatterplot3d(chest, waist, hips,
pch = (1:2)[gender], type = "h", angle = 55))
#----------------------
with(USairpollution,
scatterplot3d(temp, wind, SO2, type = "h",
angle = 55))
help(scatterplot3d)
# demo("Ch-MVA")
rm(list=ls())
cat("\014")   # ctrl+L to the console
graphics.off()
browse()
data("USairpollution", package = "HSAUR2")
head(USairpollution)
mlab <- "Manufacturing enterprises with 20 or more workers"
plab <- "Population size (1970 census) in thousands"
plot(popul ~ manu, data = USairpollution, xlab = mlab, ylab = plab)
# com as distribuicoes marginais
graphics.off()
plot(popul ~ manu, data = USairpollution, xlab = mlab, ylab = plab)
rug(USairpollution$manu, side = 1)
rug(USairpollution$popul, side = 2)
# com subplots
graphics.off()
layout(matrix(c(2, 0, 1, 3), nrow = 2, byrow = TRUE),
widths = c(2, 1), heights = c(1, 2), respect = TRUE)
xlim <- with(USairpollution, range(manu)) * 1.1
plot(popul ~ manu, data = USairpollution, cex.lab = 0.9,
xlab = mlab, ylab = plab, type = "n", xlim = xlim)
with(USairpollution, text(manu, popul, cex = 0.6,
labels = abbreviate(row.names(USairpollution))))
with(USairpollution, hist(manu, main = "", xlim = xlim))
with(USairpollution, boxplot(popul))
#---------------
library("MVA")
#---------------
# The bivariate boxplot
graphics.off()
outcity <- match(lab <- c("Chicago", "Detroit",
"Cleveland", "Philadelphia"), rownames(USairpollution))
outcity
x <- USairpollution[, c("manu", "popul")]
bvbox(x, mtitle = "", xlab = mlab, ylab = plab)
text(x$manu[outcity], x$popul[outcity], labels = lab,
cex = 0.7, pos = c(2, 2, 4, 2, 2))
#---------------
with(USairpollution, cor(manu, popul))
with(USairpollution, cor(manu[-outcity], popul[-outcity]))
#---------------
# The bivariate boxplot
# 2.2.2 The convex hull of bivariate data
graphics.off()
(hull <- with(USairpollution, chull(manu, popul)))
with(USairpollution,
plot(manu, popul, pch = 1, xlab = mlab, ylab = plab))
with(USairpollution,
polygon(manu[hull], popul[hull], density = 15, angle = 30))
with(USairpollution, cor(manu[-hull],popul[-hull]))
# correlacao se altera, mas quais pontos foram excluidos?
hull
USairpollution[hull,]
with(USairpollution,
points(manu[hull],popul[hull],pch = 19,col='blue'))
# ------------ terminamos aqui a aula passada, em 21/8/15
# uma outra maneira de arranjar multiplos graficos
graphics.off()
attach(mtcars)
head(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
plot(wt,disp, main="Scatterplot of wt vs disp")
hist(wt, main="Histogram of wt")
boxplot(wt, main="Boxplot of wt")
# ------------------------ chi plots
graphics.off()
par(mfrow=c(2,1))
with(USairpollution, plot(manu, popul, xlab = mlab, ylab = plab, cex.lab = 0.9))
with(USairpollution, chiplot(manu, popul))
# ------------------------ chi plots: variaveis independentes
graphics.off()
cat("\014")   # ctrl+L to the console
# runif generates random deviates.
x <- runif(200,0,10)
y <- runif(200,0,10)
par(mfrow=c(3,2))
plot(x, y, xlim=c(0,10),ylim=c(0,10), main="Scatterplot of 200 points")
chiplot(x, y, main="chi plot of 200 points")
(x <- runif(20,0,10))
y <- runif(20,0,10)
plot(x, y, xlim=c(0,10),ylim=c(0,10), main="Scatterplot of 20 points")
chiplot(x, y, main="chi plot of 20 points")
with(USairpollution, plot(manu, popul, xlab = mlab, ylab = plab, cex.lab = 0.9, main="Scatterplot of popul x namu"))
with(USairpollution, chiplot(manu, popul, main="chi plot of popul x namu"))
# -------------------- rnorm - random
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(3,2))
hist(rnorm(20))
hist(rnorm(20))
hist(rnorm(200))
hist(rnorm(2000))
hist(rnorm(20000),breaks=20)
hist(rnorm(20000),breaks=50)
# ---------------- dnorm - density
# returns the height of the probability distribution at each point.
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(3,2))
x <- seq(-4,4,by=.1)
y <- dnorm(x)
plot(x,y)
x <- seq(-4,4,by=.1)
y <- dnorm(x,mean=2.5,sd=0.1)
plot(x,y)
x <- seq(0,4,by=.1)
y <- dnorm(x,mean=2.5,sd=0.1)
plot(x,y,pch = 19,cex=.5,col='blue')
# ---------------- pnorm - probability
# computes the probability that a normally distributed random number
# will be less than that number. "Cumulative Distribution Function."
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(3,2))
pnorm(0)
pnorm(-1)
pnorm(1)
pnorm(0,mean=2)
pnorm(0,mean=2,sd=3)
x <- seq(-4,4,by=.1)
y <- pnorm(x)
plot(x,y,cex=0.5)
y <- pnorm(x, lower.tail = F)
plot(x,y,cex=0.5)
y <- pnorm(x,mean=3,sd=4)
plot(x,y)
# ---------------- qnorm - quatile
#  qnorm which is the inverse of pnorm.
# you give it a probability, and it returns the number
# whose cumulative distribution matches the probability.
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(3,2))
qnorm(0.5)
qnorm(0.5,mean=1)
qnorm(0.5,mean=1,sd=2)
qnorm(0.5,mean=2,sd=2)
qnorm(0.5,mean=2,sd=4)
qnorm(0.25,mean=2,sd=2)
qnorm(0.333)
qnorm(0.333,sd=3)
qnorm(0.75,mean=5,sd=2)
x <- seq(0,1,by=.05)
y <- qnorm(x)
plot(x,y)
y <- qnorm(x,mean=3,sd=2)
plot(x,y)
y <- qnorm(x,mean=3,sd=0.1)
plot(x,y)
# ---------------- dpois - density
# returns the height of the probability distribution at each point.
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(3,2))
x <- seq(0,10,by=1)
y <- dpois(x,1)
plot(x,y)
x <- seq(0,10)
y <- dpois(x,4)
plot(x,y)
x <- seq(0,10)
y <- dpois(x,7)
plot(x,y,pch = 19,cex=.5,col='blue')
# ------------ glyph plots: bubble plot
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(2,1))
ylim <- with(USairpollution, range(wind)) * c(0.95, 1)
plot(wind ~ temp, data = USairpollution,
xlab = "Average annual temperature (Fahrenheit)",
ylab = "Average annual wind speed (m.p.h.)", pch = 10,
ylim = ylim)
with(USairpollution, symbols(temp, wind, circles = SO2,
inches = 0.5, add = TRUE))
# ------------ glyph plots: star plot
plot(wind ~ temp, data = USairpollution,
xlab = "Average annual temperature (Fahrenheit)",
ylab = "Average annual wind speed (m.p.h.)", pch = 10,
ylim = ylim)
with(USairpollution,
stars(USairpollution[,-c(2,5)], locations = cbind(temp, wind),
labels = NULL, add = TRUE, cex = .5))
# ---------------------- stars
graphics.off()
cat("\014")   # ctrl+L to the console
stars(USairpollution, cex = 0.55)
# ---------------------- scaterplot matrix
graphics.off()
cat("\014")   # ctrl+L to the console
pairs(USairpollution, pch = ".", cex = 8)
round(cor(USairpollution), 4)
pairs(USairpollution,
panel = function (x, y, ...) {
points(x, y, ...)
abline(lm(y ~ x), col = "blue",lwd=2)
}, pch = ".", cex = 7)
# ------------------- Kernel density estimators
graphics.off()
cat("\014")   # ctrl+L to the console
rec <- function(x) (abs(x) < 1) * 0.5
tri <- function(x) (abs(x) < 1) * (1 - abs(x))
gauss <- function(x) 1/sqrt(2*pi) * exp(-(x^2)/2)
x <- seq(from = -3, to = 3, by = 0.001)
plot(x, rec(x), type = "l", ylim = c(0,1), lty = 1,
ylab = expression(K(x)))
lines(x, tri(x), lty = 2)
lines(x, gauss(x), lty = 3)
legend("topleft", legend = c("Rectangular", "Triangular",
"Gaussian"), lty = 1:3, title = "kernel functions",
bty = "n")
#--------------- exemplo 1D
graphics.off()
cat("\014")   # ctrl+L to the console
#x <- c(0, 1, 1.1, 1.5, 1.9, 2.8, 2.9, 3.5)
x <- runif(50,1,10)
n <- length(x)
xgrid <- seq(from = min(x) - 1, to = max(x) + 1, by = 0.01)
h <- 0.4
bumps <- sapply(x, function(a) gauss((xgrid - a)/h)/(n * h))
class(bumps)
attributes(bumps)
h <- hist(x, breaks = 15, plot = F)
(hmax <- ceiling(10*max(h$density))/10)
(pmax <- ceiling(10*max(rowSums(bumps)))/10)
plot(xgrid, rowSums(bumps), ylab = expression(hat(f)(x)), type = "l", xlab = "x", ylim = c(0,max(pmax,hmax)), lwd = 2)
hist(x, breaks = 15, freq = F, border = 'blue', add = T)
rug(x, lwd = 2)
out <- apply(bumps, 2, function(b) lines(xgrid, b))
#---------------- exemplo 2D
graphics.off()
cat("\014")   # ctrl+L to the console
epa <- function(x, y) ((x^2 + y^2) < 1) * 2/pi * (1 - x^2 - y^2)
class(epa)
x <- seq(from = -1.1, to = 1.1, by = 0.05)
x
epavals <- sapply(x, function(a) epa(a, x))
class(epavals)
persp(x = x, y = x, z = epavals, xlab = "x", ylab = "y",
zlab = expression(K(x, y)), theta = -35, axes = TRUE,
box = TRUE)
#-----------------------------
library("KernSmooth")
attributes(CYGOB1)
plot(CYGOB1, pch = 19,  col = 'blue',  xlab = "log surface temperature",
ylab = "log light intensity")
CYGOB1d <- bkde2D(CYGOB1, bandwidth = sapply(CYGOB1, dpik))
class(CYGOB1d)
attributes(CYGOB1d)
CYGOB1d$x1[1:10]
CYGOB1d$x2[1:10]
CYGOB1d$fhat[1:10]
contour(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat, add = TRUE)
#-----------------------------
persp(x = CYGOB1d$x1, y = CYGOB1d$x2, z = CYGOB1d$fhat,
xlab = "log surface temperature",
ylab = "log light intensity",
zlab = "density")
#--------------------
# exemplo com dados aleatorios
graphics.off()
cat("\014")   # ctrl+L to the console
par(mfrow=c(2,2))
x <- runif(30,0,1)
y <- runif(30,0,1)
zframe <- data.frame(x,y)
plot(x,y, pch = 19,  col = 'blue',  xlab = "eixo x",
ylab = "eixo y")
cz <- bkde2D(zframe, bandwidth = sapply(zframe, dpik))
contour(x = cz$x1, y = cz$x2, z = cz$fhat, add = TRUE)
persp(x = cz$x1, y = cz$x2, z = cz$fhat, theta = 0, phi = 15, # default
xlab = "log surface temperature",
ylab = "log light intensity",
source("load.R")
load(CENSUS94_PATH)
# Covering everything from the first chapter
head(census94)
summary(census94)
numeric_cols <- c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
cov(census94[numeric_cols])
var(census94[numeric_cols])
cor(census94[numeric_cols])
dist(scale(census94[1:14, numeric_cols], center = FALSE))
sapply(numeric_cols, function(s) { qqnorm(census94[, s], main = s); qqline(census94[, s]) } )
# Covering everything from the second chapter
par(mfrow=c(5, 1))
plot(age ~ income, data = census94)
plot(education_num ~ income, data = census94)
plot(marital_status ~ income, data = census94)
plot(race ~ income, data = census94)
plot(sex ~ income, data = census94)
source("load.R")
load(CENSUS94_PATH)
# Covering everything from the first chapter
head(census94)
summary(census94)
numeric_cols <- c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
cov(census94[numeric_cols])
var(census94[numeric_cols])
cor(census94[numeric_cols])
dist(scale(census94[1:14, numeric_cols], center = FALSE))
sapply(numeric_cols, function(s) { qqnorm(census94[, s], main = s); qqline(census94[, s]) } )
# Covering everything from the second chapter
par(mfrow=c(5, 1))
plot(age ~ income, data = census94)
plot(education_num ~ income, data = census94)
plot(marital_status ~ income, data = census94)
plot(race ~ income, data = census94)
plot(sex ~ income, data = census94)
source("load.R")
load(CENSUS94_PATH)
# Covering everything from the first chapter
head(census94)
summary(census94)
numeric_cols <- c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
cov(census94[numeric_cols])
var(census94[numeric_cols])
cor(census94[numeric_cols])
dist(scale(census94[1:14, numeric_cols], center = FALSE))
sapply(numeric_cols, function(s) { qqnorm(census94[, s], main = s); qqline(census94[, s]) } )
# Covering everything from the second chapter
par(mfrow=c(5, 1))
plot(age ~ income, data = census94)
plot(education_num ~ income, data = census94)
plot(marital_status ~ income, data = census94)
plot(race ~ income, data = census94)
plot(sex ~ income, data = census94)
source("load.R")
load(CENSUS94_PATH)
# Covering everything from the first chapter
head(census94)
summary(census94)
numeric_cols <- c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
cov(census94[numeric_cols])
var(census94[numeric_cols])
cor(census94[numeric_cols])
dist(scale(census94[1:14, numeric_cols], center = FALSE))
sapply(numeric_cols, function(s) { qqnorm(census94[, s], main = s); qqline(census94[, s]) } )
# Covering everything from the second chapter
par(mfrow=c(3, 1))
plot(age ~ income, data = census94)
plot(education_num ~ income, data = census94)
plot(marital_status ~ income, data = census94)
#plot(race ~ income, data = census94)
#plot(sex ~ income, data = census94)
source("load.R")
load(CENSUS94_PATH)
# Covering everything from the first chapter
head(census94)
summary(census94)
numeric_cols <- c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
cov(census94[numeric_cols])
var(census94[numeric_cols])
cor(census94[numeric_cols])
dist(scale(census94[1:14, numeric_cols], center = FALSE))
sapply(numeric_cols, function(s) { qqnorm(census94[, s], main = s); qqline(census94[, s]) } )
# Covering everything from the second chapter
par(mfrow=c(3, 2))
plot(age ~ income, data = census94)
plot(education_num ~ income, data = census94)
plot(marital_status ~ income, data = census94)
plot(race ~ income, data = census94)
plot(sex ~ income, data = census94)
source("load.R")
load(CENSUS94_PATH)
# Covering everything from the first chapter
head(census94)
summary(census94)
numeric_cols <- c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
cov(census94[numeric_cols])
var(census94[numeric_cols])
cor(census94[numeric_cols])
dist(scale(census94[1:14, numeric_cols], center = FALSE))
sapply(numeric_cols, function(s) { qqnorm(census94[, s], main = s); qqline(census94[, s]) } )
# Covering everything from the second chapter
par(mfrow=c(3, 2))
plot(age ~ income, data = census94)
plot(education_num ~ income, data = census94)
plot(marital_status ~ income, data = census94)
plot(relationship ~ income, data = census94)
plot(race ~ income, data = census94)
plot(sex ~ income, data = census94)
plot(hours_per_week ~ age, data = census94)
plot(hours_per_week ~ age, data = census94)
plot(hours_per_week ~ fnlwgt, data = census94)
plot(hours_per_week ~ capital_gain, data = census94)
plot(hours_per_week ~ capital_loss, data = census94)
plot(hours_per_week ~ age, data = census94)
plot(jitter(hours_per_week) ~ jitter(age), data = census94)
plot(jitter(hours_per_week, 2) ~ jitter(age, 2), data = census94)
plot(hours_per_week ~ age, data = census94[which(census94$hours_per_week >= 90),])
plot(hours_per_week ~ nationality, data = census94[which(census94$hours_per_week >= 90),])
plot(hours_per_week ~ native_country, data = census94[which(census94$hours_per_week >= 90),])
census94[which(census94$hours_per_week >= 90),]
